@page "/therm"
@using RegnalHome.Server.Data
@using RegnalHome.Common.Enums
@using RegnalHome.Common.Models
@inject ThermService _thermService
@inject NavigationManager _navigationManager
@attribute [Authorize]

<h3>RegnalHome.Therm</h3>

@if (sensors == null)
{
    <p><em>Loading...</em></p>
}
else
{
    @if (loading)
    {
        <p><em>Reloading...</em></p>
    }

    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Temp. (C)</th>
                <th>ConnectionState</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var sensor in sensors)
            {
                <tr class="card-link" @onclick="()=>Navigate(sensor.Id)">
                    <td>@sensor.Name</td>
                    <td>
                        @if (sensor.ConnectionState == ConnectionState.Online)
                        {
                            @sensor.Temperature
                        }
                    </td>
                    <td>@sensor.ConnectionState</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private ThermSensor[]? sensors;
    private bool loading;
    private CancellationTokenSource? reloadSensorsCts;

    protected override async Task OnInitializedAsync()
    {
        sensors = (await _thermService.GetThermSensors()).Cast<ThermSensor>().ToArray();

        ReloadSensors();

        var timer = new Timer(ReloadSensors, null, TimeSpan.Zero, TimeSpan.FromSeconds(20));    
    }

    private void ReloadSensors(object? state = null)
    {
        reloadSensorsCts?.Cancel(true);
        reloadSensorsCts = new CancellationTokenSource(2000);

        var task = InvokeAsync(() =>
            {
                reloadSensorsCts.Token.ThrowIfCancellationRequested();

                loading = true;
                StateHasChanged();
            });

        var continueTask = task.ContinueWith(async _ =>
        {
            reloadSensorsCts.Token.ThrowIfCancellationRequested();

            var getSensors = await _thermService.GetThermSensors(reloadSensorsCts.Token);

            reloadSensorsCts.Token.ThrowIfCancellationRequested();

            var sensorsArray = getSensors.Cast<ThermSensor>().ToArray();
            
            reloadSensorsCts.Token.ThrowIfCancellationRequested();

            await InvokeAsync(() =>
            {
                sensors = sensorsArray;
                StateHasChanged();
            });
        });

        continueTask = continueTask.ContinueWith(_ => ReloadSensorsInner(reloadSensorsCts.Token));

        continueTask.ContinueWith(async _ =>
        {
            await InvokeAsync(() =>
            {
                loading = false;
                StateHasChanged();
            });

            reloadSensorsCts.Token.ThrowIfCancellationRequested();
        });

        Task.Factory.StartNew(async () => await task);
    }

    private async Task ReloadSensorsInner(CancellationToken cancellationToken)
    {
        await Task.WhenAll(
            sensors?.Select(async p =>
            {
                cancellationToken.ThrowIfCancellationRequested();

                var sensor = await _thermService.GetThermSensor(p.Id.ToString(), cancellationToken);

                cancellationToken.ThrowIfCancellationRequested();

                p.UpdateAsync((ThermSensor)sensor, cancellationToken);
            }) ?? Array.Empty<Task>());
    }

    void Navigate(Guid id)
    {
        _navigationManager.NavigateTo($"/therm/{id}");
    }
}
