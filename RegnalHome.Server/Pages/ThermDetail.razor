@page "/therm/{id}"
@using RegnalHome.Server.Data
@using RegnalHome.Common.Enums
@using RegnalHome.Common.Models
@inject ThermService _thermService
@attribute [Authorize]

<h3>RegnalHome.Therm</h3>

@if (sensor == null)
{
    <p><em>Loading...</em></p>
}
else
{
    @if (saving)
    {
        <p><em>Saving...</em></p>
    }
    <EditForm class="col-10" Model="@sensor" OnValidSubmit="@HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div>
            <div class="col-2 oi-align-right">
                Id
            </div>
            <div class="col-10 oi-align-left offset-1">
                @sensor.Id
            </div>
        </div>

        <div>
            <div class="col-2 oi-align-right">
                Name
            </div>
            <div class="col-8 oi-align-left offset-1">
                <InputText id="Name" @bind-Value="@sensor.Name" />
            </div>
        </div>

        <div>
            <div class="col-2 oi-align-right">
                Actual temperature
            </div>
            <div class="col-8 oi-align-left offset-1">
                @if (sensor.ConnectionState == ConnectionState.Online)
                {
                    @sensor.Temperature
                }
            </div>
        </div>

        <div>
            <div class="col-2 oi-align-right">
                Target temperature
            </div>
            <div class="col-8 oi-align-left offset-1">
                <InputNumber id="TargetTemperature" @bind-Value="@sensor.TargetTemperature" />
            </div>
        </div>

        <button type="submit">Submit</button>
    </EditForm>
}

@code {
    [Parameter]
    public string? id { get; set; }

    private ThermSensor? sensor;

    protected override async Task OnInitializedAsync()
    {
        sensor = (ThermSensor?)await _thermService.GetThermSensor(id);
    }
}

@functions {
    private bool saving;

    void Reload()
    {
        throw new NotImplementedException();
    }

    private void HandleValidSubmit()
    {
        var task = InvokeAsync(() =>
        {
            saving = true;
            StateHasChanged();
        });

        var continueTask = task.ContinueWith(async _ =>
        {
            await _thermService.SaveThermSensor(sensor);
        });

        continueTask.ContinueWith(async _ =>
        {
            await InvokeAsync(() =>
            {
                saving = false;
                StateHasChanged();
            });
        });

        Task.Factory.StartNew(async () => await task);
    }

}
